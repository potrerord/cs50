sort1 uses:
    bubble sort

How do you know?:
    Bubble sort works most efficiently on sorted data than on random or
    reversed data. It seemed to have the hardest time on the reversed
    data, which means it's probably not selection because selection
    would be done with the reversed data by the halfway point.

sort2 uses:
    merge sort

How do you know?:
    sort2 vastly outperformed the other 2 sorting algorithms on the
    random data (and in general), especially as the size of the data set
    increased.

sort3 uses:
    selection sort

How do you know?:
    It had pretty consistent and predictable (linear) growth in runtime
    as the data got larger. It did not seem to perform better or worse
    with the different contexts of random/reversed/sorted.

-------

Notes:          sort1        sort2       sort3

random
    5000        0m0.108s    0m0.046s    0m0.078s
    10000       0m0.542s    0m0.075s    0m0.192s
    50000       0m7.307s    0m0.318s    0m3.037s

        hunch: sort2 is merge sort bc fastest with random by far.
        sort1 might be bubble but we'll see with sorted.

reversed
    5000        0m0.093s    0m0.045s    0m0.069s
    10000       0m0.274s    0m0.061s    0m0.169s
    50000       0m5.403s    0m0.416s    0m3.268s

        I would expect selection to do better on reverse than bubble
        because that's like the exact half-best scenario for it, so
        sort3 is prob selection. Bubble would struggle needlessly with
        reversed so that's probably sort1 again.

sorted
    5000        0m0.044s    0m0.002s    0m0.045s
    10000       0m0.084s    0m0.097s    0m0.146s
    50000       0m0.393s    0m0.393s    0m3.019s

        Looks like sort3 took longer than necessary on the sorted data,
        which would point to it being selection. Bubble is optimized for
        sorted data - looks like it even beat out/tied with merge for
        the larger sets.